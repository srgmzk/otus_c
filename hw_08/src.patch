diff -Naur ./clib_old/src/clib-build.c ./clib/src/clib-build.c
--- ./clib_old/src/clib-build.c	2020-09-08 02:51:24.000000000 +0500
+++ ./clib/src/clib-build.c	2022-12-12 11:00:40.303586095 +0500
@@ -165,6 +165,7 @@
 
     if (json) {
       root_package = clib_package_new(json, opts.verbose);
+      free(json);
     }
 
     if (root_package && root_package->prefix) {
@@ -189,7 +190,6 @@
 #ifdef HAVE_PTHREADS
   pthread_mutex_unlock(&mutex);
 #endif
-
   if (0 == fs_exists(path)) {
     debug(&debugger, "read %s", path);
     json = fs_read(path);
@@ -463,14 +463,18 @@
   if (0 != package) {
     clib_package_free(package);
   }
+
   if (0 != json) {
     free(json);
+    json = NULL;
   }
+
   if (0 == ok) {
     if (0 != path) {
       free(path);
     }
   }
+
   return rc;
 }
 
@@ -748,11 +752,16 @@
     }
   });
 
+ 
   hash_free(built);
   command_free(&program);
   curl_global_cleanup();
   clib_package_cleanup();
 
+  if (0 != root_package) {
+    clib_package_free(root_package);
+  }
+
   if (opts.dir) {
     free((void *)opts.dir);
   }
@@ -796,6 +805,5 @@
       }
     }
   }
-
   return rc;
 }
diff -Naur ./clib_old/src/clib-configure.c ./clib/src/clib-configure.c
--- ./clib_old/src/clib-configure.c	2020-09-08 02:51:24.000000000 +0500
+++ ./clib/src/clib-configure.c	2022-12-12 11:00:40.303586095 +0500
@@ -156,6 +156,7 @@
 
     if (json) {
       root_package = clib_package_new(json, opts.verbose);
+      free(json);
     }
 
     if (root_package && root_package->prefix) {
@@ -423,6 +424,7 @@
   }
   if (0 != json) {
     free(json);
+    json = NULL;
   }
   if (0 == ok) {
     if (0 != path) {
@@ -682,6 +684,10 @@
   curl_global_cleanup();
   clib_package_cleanup();
 
+  if (0 != root_package) {
+    clib_package_free(root_package);
+  }
+
   if (opts.dir) {
     free((void *)opts.dir);
   }
diff -Naur ./clib_old/src/clib-upgrade.c ./clib/src/clib-upgrade.c
--- ./clib_old/src/clib-upgrade.c	2020-09-08 02:51:24.000000000 +0500
+++ ./clib/src/clib-upgrade.c	2022-12-12 11:00:40.303586095 +0500
@@ -127,6 +127,7 @@
 
     if (json) {
       root_package = clib_package_new(json, opts.verbose);
+	  free(json);
     }
   }
 
@@ -167,10 +168,17 @@
   }
 
 cleanup:
+  if (tmp)
+	  free(tmp);
   if (0 != extended_slug) {
     free(extended_slug);
   }
   clib_package_free(pkg);
+
+  if (0 != root_package) {
+    clib_package_free(root_package);
+  }
+
   return rc;
 }
 
diff -Naur ./clib_old/src/common/clib-package.c ./clib/src/common/clib-package.c
--- ./clib_old/src/common/clib-package.c	2020-09-08 02:51:24.000000000 +0500
+++ ./clib/src/common/clib-package.c	2022-12-12 13:21:34.213950871 +0500
@@ -589,6 +589,7 @@
     clib_package_free(pkg);
     pkg = NULL;
   }
+
   return pkg;
 }
 
@@ -648,6 +649,11 @@
 #endif
   } else {
   download:
+    if (res) {
+   	  http_get_free(res);
+      res = NULL;
+    }
+
 #ifdef HAVE_PTHREADS
     pthread_mutex_unlock(&lock.mutex);
 #endif
@@ -661,11 +667,12 @@
 #else
       res = http_get(json_url);
 #endif
-      json = res->data;
-      _debug("status: %d", res->status);
+
       if (!res || !res->ok) {
         goto download;
       }
+	  json = res->data;
+	  _debug("status: %d", res->status);
       log = "fetch";
     }
   }
@@ -699,7 +706,7 @@
       }
     }
   } else {
-    pkg->version = version;
+     pkg->version = version;
   }
 
   // force package author (don't know how this could fail)
@@ -711,10 +718,10 @@
       free(author);
     }
   } else {
-    pkg->author = strdup(author);
+    pkg->author = author;
   }
 
-  if (!(repo = clib_package_repo(pkg->author, pkg->name))) {
+    if (!(repo = clib_package_repo(pkg->author, pkg->name))) {
     goto error;
   }
 
@@ -766,8 +773,8 @@
       logger_warn("warning", "unable to fetch %s/%s:%s", author, name, file);
     }
   }
-
-  free(author);
+  if (author)
+	  free(author);
   free(name);
   free(version);
   free(url);
@@ -949,7 +956,6 @@
 #ifdef HAVE_PTHREADS
     pthread_mutex_unlock(&lock.mutex);
 #endif
-
     rc = http_get_file_shared(url, path, clib_package_curl_share);
     saved = 1;
   } else {
@@ -993,16 +999,24 @@
   return rc;
 }
 
+void clean_fetch_thread(void *arg) {
+	free((int*)arg);
+}
+
 #ifdef HAVE_PTHREADS
 static void *fetch_package_file_thread(void *arg) {
   fetch_package_file_thread_data_t *data = arg;
+
   int *status = malloc(sizeof(int));
+  pthread_cleanup_push(clean_fetch_thread, status);
   int rc =
       fetch_package_file_work(data->pkg, data->dir, data->file, data->verbose);
   *status = rc;
   (void)data->pkg->refs--;
   pthread_exit((void *)status);
-  return (void *)rc;
+
+  return (void *)(*status);
+  pthread_cleanup_pop(*status);
 }
 #endif
 
@@ -1032,7 +1046,6 @@
   fetch->dir = dir;
   fetch->file = file;
   fetch->verbose = verbose;
-
   rc = pthread_attr_init(&fetch->attr);
 
   if (0 != rc) {
@@ -1214,6 +1227,7 @@
     }
 
     setenv("CFLAGS", cflags, 1);
+    free(flags);
   }
 
   E_FORMAT(&command, "cd %s && %s", unpack_dir, pkg->install);
@@ -1222,7 +1236,10 @@
   rc = system(command);
 
 cleanup:
+  if (deps)
+	free(deps);
   free(tmp);
+  free(unpack_dir);
   free(command);
   free(tarball);
   free(file);
@@ -1315,7 +1332,6 @@
     pthread_mutex_unlock(&lock.mutex);
 #endif
   }
-
 #ifdef HAVE_PTHREADS
   fetch_package_file_thread_data_t **fetchs = 0;
   if (NULL != pkg && NULL != pkg->src) {
@@ -1380,12 +1396,13 @@
 #ifdef HAVE_PTHREADS
     pthread_mutex_lock(&lock.mutex);
 #endif
-    hash_set(visited_packages, strdup(pkg->name), "t");
+    if (!hash_has(visited_packages, pkg->name)) {
+	    hash_set(visited_packages, strdup(pkg->name), "t");
+	}
 #ifdef HAVE_PTHREADS
     pthread_mutex_unlock(&lock.mutex);
 #endif
-  }
-
+  } 
   // fetch makefile
   if (!opts.global && pkg->makefile) {
     _debug("fetch: %s/%s", pkg->repo, pkg->makefile);
@@ -1479,20 +1496,20 @@
       i = 0;
     }
 
-    fetchs[i] = fetch;
+	 fetchs[i] = fetch;
 
     (void)pending++;
-
+   
     if (i < max) {
       (void)i++;
     } else {
-      while (--i >= 0) {
+      while (i >= 0) {
         fetch_package_file_thread_data_t *data = fetchs[i];
         int *status = 0;
         pthread_join(data->thread, (void **)status);
         free(data);
         fetchs[i] = NULL;
-
+        i--;
         (void)pending--;
 
         if (0 != status) {
@@ -1676,6 +1693,7 @@
 
   free(pkg);
   pkg = 0;
+
 }
 
 void clib_package_dependency_free(void *_dep) {
@@ -1696,4 +1714,8 @@
     hash_free(visited_packages);
     visited_packages = 0;
   }
+
+  if (0 != clib_package_curl_share)
+	  curl_share_cleanup(clib_package_curl_share);
+
 }
